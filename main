import os
import pygame
import random
import threading
from tkinter import Tk, Label, Button, filedialog
import pystray
from PIL import Image

def on_quit(icon, item):
    app.root.withdraw()  # Hide the app window instead of closing it

class MusicPlayer:
    def __init__(self, root):
        self.root = root
        self.root.title("Music Player")
        self.song_list = []  # List to store selected music files
        self.current_index = -1  # Index of the currently playing song

        self.label = Label(root, text="Select music files")
        self.label.pack(pady=20)

        self.browse_button = Button(root, text="Browse", command=self.load_music)
        self.browse_button.pack()

        self.shuffle_button = Button(root, text="Shuffle", state="disabled", command=self.shuffle_music)
        self.shuffle_button.pack()

        self.play_button = Button(root, text="Play", state="disabled", command=self.play_music)
        self.play_button.pack()

        pygame.init()

    def load_music(self):
        self.song_list = list(filedialog.askopenfilenames(filetypes=[("Audio Files", "*.mp3 *.wav")]))
        if self.song_list:
            self.label.config(text=f"Selected {len(self.song_list)} songs")
            self.shuffle_button.config(state="normal")
            self.play_button.config(state="normal")

    def shuffle_music(self):
        if self.song_list:
            random.shuffle(self.song_list)
            self.current_index = -1
            self.label.config(text="Shuffled playlist")

    def play_music(self):
        if self.song_list:
            if self.current_index == -1:
                self.shuffle_music()

            if self.current_index < len(self.song_list) - 1:
                self.current_index += 1
            else:
                self.current_index = 0

            current_song = self.song_list[self.current_index]
            pygame.mixer.init()
            pygame.mixer.music.load(current_song)
            pygame.mixer.music.play()
            self.label.config(text=f"Playing: {os.path.basename(current_song)}")

def create_tray_icon():
    menu = (pystray.MenuItem('Open', open_window), pystray.MenuItem('Exit', exit_application))
    image = Image.open(r"image here")  # Replace with the actual path to your background image file
    icon = pystray.Icon("music_player", image, "Music Player", menu)
    icon.run()

def open_window(icon, item):
    app.root.deiconify()  # Show the app window

def exit_application(icon, item):
    icon.stop()
    app.root.destroy()  # Close the application gracefully

if __name__ == "__main__":
    tray_thread = threading.Thread(target=create_tray_icon)
    tray_thread.daemon = True
    tray_thread.start()

    root = Tk()
    app = MusicPlayer(root)
    app.root.protocol("WM_DELETE_WINDOW", lambda: on_quit(None, None))  # Minimize to tray on window close
    root.mainloop()
